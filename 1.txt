Step 2: Configure Git
Open Git Bash and configure your username and email:

bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

Step 3: Create a Local Repository
Open Git Bash and navigate to the directory where you want to create your project:

bash
cd /c/path/to/your/directory
Replace /c/path/to/your/directory with the actual path.

Initialize a New Repository:

bash
git init my-project
cd my-project

Step 4: Basic Git Operations
1. Create and Stage Files
Create a New File:

bash
echo "Hello, World!" > README.md

Stage the File:

bash
git add README.md
2. Commit Changes
Commit the Staged Changes:
bash
git commit -m "Initial commit"
3. Check Repository Status
View the Status of Your Repository:

bash
git status
4. View Commit History
View the Commit History:

bash
git log
Step 5: Working with Remote Repositories
1. Create a Remote Repository
On GitHub:
Go to GitHub and log in or create an account.
Click on the "+" icon in the top right and select "New repository."
Give your repository a name and click "Create repository."
2. Link Local Repository to Remote
In Git Bash, add the remote repository URL (replace yourusername and yourrepository):
bash
 
git remote add origin https://github.com/yourusername/yourrepository.git
3. Push Changes to Remote
Push Your Local Commits to the Remote Repository:

bash
git push -u origin master

Step 6: Pulling Changes from Remote
If changes are made in the remote repository, you can pull those changes into your local repository:

bash
git pull origin master

Step 7: Basic Branching
1. Create a New Branch
Create and Switch to a New Branch:

bash
git checkout -b my-feature-branch

2. Merge Branches
After making changes and committing them in the feature branch, switch back to the master branch and merge:

bash
git checkout master
git merge my-feature-branch

Step 8: Explore More Git Commands
You can explore more commands like git diff, git stash, and git cherry-pick as you become more familiar with Git.
Conclusion
You now have a basic understanding of how to install Git on Windows and perform fundamental operations with local and remote repositories. As you continue to use Git, you'll discover more advanced features that will help you manage your code effectively.



Common Uses:
View Changes in the Working Directory: To see changes that are not yet staged:

bash
 
git diff
View Staged Changes: To see changes that are staged for the next commit:

bash
 
git diff --cached
View Changes Between Commits: To compare two commits:

bash
 
git diff commit1 commit2
View Changes in a Specific File: To see changes in a specific file:

bash
 
git diff filename.txt
Example of git diff
Make changes to a file:

bash
 
echo "New content" >> README.md
Check the unstaged changes:

bash
 
git diff
Stage the changes:

bash
git add README.md
Check the staged changes:

bash
git diff â€“cached

git stash
The git stash command is used to temporarily save your changes in a "stash" so you can work on something else without committing those changes. This is useful when you need to switch branches or pull changes but aren't ready to commit your current work.

Common Uses:
Stash Changes: To save your changes and clean your working directory:

bash
git stash
View Stashed Changes: To see a list of stashed changes:

bash
git stash list

